(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>f});var r=n(537),o=n.n(r),a=n(645),i=n.n(a),c=n(667),l=n.n(c),d=new URL(n(937),n.b),s=i()(o()),u=l()(d);s.push([e.id,"@font-face {\n  font-family: 'Roboto';\n  src: url("+u+");\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  font-size: 1em;\n  font-weight: 400;\n  font-family: 'Roboto', Arial, Helvetica, sans-serif;\n  color: #555;\n}\n\nbody {\n  display: grid;\n  grid-template: 40px auto / 225px auto;\n  height: 100vh;\n  width: 100vw;\n}\n\n.header {\n  background-color: #38bdf8;\n  grid-column: 1 / 3;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding-left: 4px;\n}\n\n.logo {\n  height: 36px;\n}\n\nh1 {\n  font-size: 1.5em;\n  font-weight: bold;\n  color: white;\n}\n\n.navbar {\n  background-color: #f7f7f7;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 12px 16px;\n  font-size: 1.25em;\n  font-weight: bold;\n}\n\n.project {\n  display: flex;\n  justify-content: space-between;\n}\n\n.home,\n.week,\n.month,\n.project p,\n.add,\n.edit,\n.delete,\n.checkbox {\n  cursor: pointer;\n}\n\n.home:hover,\n.week:hover,\n.month:hover,\n.project p:hover {\n  color: black;\n  scale: 105%;\n  padding-left: 8px;\n}\n\n.add,\n.edit,\n.delete,\n.checkbox {\n  height: 24px;\n  width: 24px;\n}\n\n.add:hover,\n.edit:hover,\n.delete:hover,\n.checkbox:hover,\n.newProject:hover {\n  color: black;\n  filter: brightness(0%);\n}\n\n.projects {\n  padding-top: 12px;\n}\n\n.projectsContainer {\n  display: flex;\n  flex-direction: column;\n  padding-left: 12px;\n  gap: 8px;\n}\n\n.project {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.content {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  overflow: scroll;\n}\n\n.newProject {\n  display: flex;\n  font-size: .8em;\n  align-items: center;\n  cursor: pointer;\n  width: fit-content;\n}\n\n.todo {\n  padding: 8px;\n  border-radius: 8px;\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  min-width: 225px;\n}\n\n.low {\n  background-color: rgba(0, 255, 0, 0.6);\n}\n\n.medium {\n  background-color: rgba(255, 255, 0, 0.75);\n}\n\n.high {\n  background-color: rgba(255, 0, 0, 0.25);\n}\n\n.dueContainer,\n.priorityContainer,\n.projectContainer {\n  display: grid;\n  grid-template-columns: auto auto 1fr auto auto;\n  gap: 6px;\n}\n\n.checkbox {\n  justify-self: end;\n}\n\n.complete {\n  filter: opacity(.5);\n}\n\n.selected {\n  color: black;\n  scale: 105%;\n  padding-left: 8px;\n}\n\n.buttonsContainer {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  padding-top: 8px;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.modal-content {\n  position: relative;\n  background-color: white;\n  margin: 30% auto;\n  padding: 16px 24px;\n  border: 1px solid #888;\n  width: 250px;\n  border-radius: 20px;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n  animation-name: animate;\n  animation-duration: 0.4s\n}\n\n@keyframes animate {\n  from {top: -300px; opacity: 0}\n  to {top: 0; opacity: 1}\n}\n\nform {\n  display: grid;\n  grid-template-columns: 50px auto;\n  gap: 8px;\n  margin-top: 12px;\n  justify-items: start;\n  align-items: center;\n}\n\nform button {\n  grid-column: 1 / 3;\n  justify-self: center;\n}\n\nform p {\n  grid-row: 3 / 6;\n  padding-bottom: 4px;\n}\n\n.close {\n  float: right;\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.close:hover, \n.close:focus {\n  cursor: pointer;\n}\n\n.modal-header {\n  text-align: center;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,4CAAsC;AACxC;;AAEA;EACE,SAAS;EACT,UAAU;EACV,cAAc;EACd,gBAAgB;EAChB,mDAAmD;EACnD,WAAW;AACb;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,aAAa;EACb,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,QAAQ;EACR,iBAAiB;AACnB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,kBAAkB;EAClB,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;;;;;;;;EAQE,eAAe;AACjB;;AAEA;;;;EAIE,YAAY;EACZ,WAAW;EACX,iBAAiB;AACnB;;AAEA;;;;EAIE,YAAY;EACZ,WAAW;AACb;;AAEA;;;;;EAKE,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,QAAQ;AACV;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,mBAAmB;EACnB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,uCAAuC;AACzC;;AAEA;;;EAGE,aAAa;EACb,8CAA8C;EAC9C,QAAQ;AACV;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;EACR,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,UAAU;EACV,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,cAAc;EACd,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,gBAAgB;EAChB,kBAAkB;EAClB,sBAAsB;EACtB,YAAY;EACZ,mBAAmB;EACnB,qEAAqE;EACrE,uBAAuB;EACvB;AACF;;AAEA;EACE,MAAM,WAAW,EAAE,UAAU;EAC7B,IAAI,MAAM,EAAE,UAAU;AACxB;;AAEA;EACE,aAAa;EACb,gCAAgC;EAChC,QAAQ;EACR,gBAAgB;EAChB,oBAAoB;EACpB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;AACtB;;AAEA;EACE,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,iBAAiB;AACnB;;AAEA;;EAEE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:["@font-face {\n  font-family: 'Roboto';\n  src: url('./fonts/Roboto-Regular.ttf');\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  font-size: 1em;\n  font-weight: 400;\n  font-family: 'Roboto', Arial, Helvetica, sans-serif;\n  color: #555;\n}\n\nbody {\n  display: grid;\n  grid-template: 40px auto / 225px auto;\n  height: 100vh;\n  width: 100vw;\n}\n\n.header {\n  background-color: #38bdf8;\n  grid-column: 1 / 3;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding-left: 4px;\n}\n\n.logo {\n  height: 36px;\n}\n\nh1 {\n  font-size: 1.5em;\n  font-weight: bold;\n  color: white;\n}\n\n.navbar {\n  background-color: #f7f7f7;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 12px 16px;\n  font-size: 1.25em;\n  font-weight: bold;\n}\n\n.project {\n  display: flex;\n  justify-content: space-between;\n}\n\n.home,\n.week,\n.month,\n.project p,\n.add,\n.edit,\n.delete,\n.checkbox {\n  cursor: pointer;\n}\n\n.home:hover,\n.week:hover,\n.month:hover,\n.project p:hover {\n  color: black;\n  scale: 105%;\n  padding-left: 8px;\n}\n\n.add,\n.edit,\n.delete,\n.checkbox {\n  height: 24px;\n  width: 24px;\n}\n\n.add:hover,\n.edit:hover,\n.delete:hover,\n.checkbox:hover,\n.newProject:hover {\n  color: black;\n  filter: brightness(0%);\n}\n\n.projects {\n  padding-top: 12px;\n}\n\n.projectsContainer {\n  display: flex;\n  flex-direction: column;\n  padding-left: 12px;\n  gap: 8px;\n}\n\n.project {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.content {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  overflow: scroll;\n}\n\n.newProject {\n  display: flex;\n  font-size: .8em;\n  align-items: center;\n  cursor: pointer;\n  width: fit-content;\n}\n\n.todo {\n  padding: 8px;\n  border-radius: 8px;\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  min-width: 225px;\n}\n\n.low {\n  background-color: rgba(0, 255, 0, 0.6);\n}\n\n.medium {\n  background-color: rgba(255, 255, 0, 0.75);\n}\n\n.high {\n  background-color: rgba(255, 0, 0, 0.25);\n}\n\n.dueContainer,\n.priorityContainer,\n.projectContainer {\n  display: grid;\n  grid-template-columns: auto auto 1fr auto auto;\n  gap: 6px;\n}\n\n.checkbox {\n  justify-self: end;\n}\n\n.complete {\n  filter: opacity(.5);\n}\n\n.selected {\n  color: black;\n  scale: 105%;\n  padding-left: 8px;\n}\n\n.buttonsContainer {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  padding-top: 8px;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.modal-content {\n  position: relative;\n  background-color: white;\n  margin: 30% auto;\n  padding: 16px 24px;\n  border: 1px solid #888;\n  width: 250px;\n  border-radius: 20px;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n  animation-name: animate;\n  animation-duration: 0.4s\n}\n\n@keyframes animate {\n  from {top: -300px; opacity: 0}\n  to {top: 0; opacity: 1}\n}\n\nform {\n  display: grid;\n  grid-template-columns: 50px auto;\n  gap: 8px;\n  margin-top: 12px;\n  justify-items: start;\n  align-items: center;\n}\n\nform button {\n  grid-column: 1 / 3;\n  justify-self: center;\n}\n\nform p {\n  grid-row: 3 / 6;\n  padding-bottom: 4px;\n}\n\n.close {\n  float: right;\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.close:hover, \n.close:focus {\n  cursor: pointer;\n}\n\n.modal-header {\n  text-align: center;\n}"],sourceRoot:""}]);const f=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],d=r.base?l[0]+r.base:l[0],s=a[d]||0,u="".concat(d," ").concat(s);a[d]=s+1;var f=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(m);else{var h=o(m,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var l=r(e,o),d=0;d<a.length;d++){var s=n(a[d]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},937:(e,t,n)=>{e.exports=n.p+"fc2b5060f7accec5cf74.ttf"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0;var r={};(()=>{n.d(r,{q:()=>Re});var e=n(379),t=n.n(e),o=n(795),a=n.n(o),i=n(569),c=n.n(i),l=n(565),d=n.n(l),s=n(216),u=n.n(s),f=n(589),m=n.n(f),h=n(28),A={};A.styleTagTransform=m(),A.setAttributes=d(),A.insert=c().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=u(),t()(h.Z,A),h.Z&&h.Z.locals&&h.Z.locals;const p=n.p+"665a1069ef016cf5476b.svg",g=n.p+"127634af5f0f4edd1c28.svg",v=n.p+"7cf8a52afe4672f643db.svg",b=n.p+"6b02d340fc798272486c.svg",C=n.p+"aa6c221efb4216e2e15d.svg",y=n.p+"32652fe3cf469a776f07.svg";function w(e){let t=e.target.parentNode.parentNode.classList;if(Array.from(t).includes("complete")){t.remove("complete");const n=document.createElement("img");n.setAttribute("src",v),n.setAttribute("alt","checkbox unchecked"),n.classList.add("checkbox"),e.target.after(n),n.addEventListener("click",w),e.target.remove()}else{t.add("complete");const n=document.createElement("img");n.setAttribute("src",y),n.setAttribute("alt","checkbox checked"),n.classList.add("checkbox"),e.target.after(n),n.addEventListener("click",w),e.target.remove()}}function E(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function x(e){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x(e)}function B(e){return E(1,arguments),e instanceof Date||"object"===x(e)&&"[object Date]"===Object.prototype.toString.call(e)}function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function T(e){E(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===k(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function S(e){if(E(1,arguments),!B(e)&&"number"!=typeof e)return!1;var t=T(e);return!isNaN(Number(t))}function M(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function L(e,t){E(2,arguments);var n=T(e).getTime(),r=M(t);return new Date(n+r)}function D(e,t){E(2,arguments);var n=M(t);return L(e,-n)}var j=864e5;function U(e){E(1,arguments);var t=1,n=T(e),r=n.getUTCDay(),o=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function P(e){E(1,arguments);var t=T(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=U(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=U(a);return t.getTime()>=o.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function q(e){E(1,arguments);var t=P(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=U(n);return r}var Y=6048e5,W={};function N(){return W}function O(e,t){var n,r,o,a,i,c,l,d;E(1,arguments);var s=N(),u=M(null!==(n=null!==(r=null!==(o=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(c=i.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==o?o:s.weekStartsOn)&&void 0!==r?r:null===(l=s.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=T(e),m=f.getUTCDay(),h=(m<u?7:0)+m-u;return f.setUTCDate(f.getUTCDate()-h),f.setUTCHours(0,0,0,0),f}function z(e,t){var n,r,o,a,i,c,l,d;E(1,arguments);var s=T(e),u=s.getUTCFullYear(),f=N(),m=M(null!==(n=null!==(r=null!==(o=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(c=i.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==o?o:f.firstWeekContainsDate)&&void 0!==r?r:null===(l=f.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(u+1,0,m),h.setUTCHours(0,0,0,0);var A=O(h,t),p=new Date(0);p.setUTCFullYear(u,0,m),p.setUTCHours(0,0,0,0);var g=O(p,t);return s.getTime()>=A.getTime()?u+1:s.getTime()>=g.getTime()?u:u-1}function H(e,t){var n,r,o,a,i,c,l,d;E(1,arguments);var s=N(),u=M(null!==(n=null!==(r=null!==(o=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(c=i.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==o?o:s.firstWeekContainsDate)&&void 0!==r?r:null===(l=s.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1),f=z(e,t),m=new Date(0);m.setUTCFullYear(f,0,u),m.setUTCHours(0,0,0,0);var h=O(m,t);return h}var R=6048e5;function F(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const Q=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return F("yy"===t?r%100:r,t.length)},G=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):F(n+1,2)},X=function(e,t){return F(e.getUTCDate(),t.length)},I=function(e,t){return F(e.getUTCHours()%12||12,t.length)},Z=function(e,t){return F(e.getUTCHours(),t.length)},J=function(e,t){return F(e.getUTCMinutes(),t.length)},_=function(e,t){return F(e.getUTCSeconds(),t.length)},V=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return F(Math.floor(r*Math.pow(10,n-3)),t.length)};var $={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return Q(e,t)},Y:function(e,t,n,r){var o=z(e,r),a=o>0?o:1-o;return"YY"===t?F(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):F(a,t.length)},R:function(e,t){return F(P(e),t.length)},u:function(e,t){return F(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return F(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return F(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return G(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return F(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var o=function(e,t){E(1,arguments);var n=T(e),r=O(n,t).getTime()-H(n,t).getTime();return Math.round(r/R)+1}(e,r);return"wo"===t?n.ordinalNumber(o,{unit:"week"}):F(o,t.length)},I:function(e,t,n){var r=function(e){E(1,arguments);var t=T(e),n=U(t).getTime()-q(t).getTime();return Math.round(n/Y)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):F(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):X(e,t)},D:function(e,t,n){var r=function(e){E(1,arguments);var t=T(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),o=n-r;return Math.floor(o/j)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):F(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return F(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return F(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return F(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return I(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Z(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):F(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):F(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):J(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):_(e,t)},S:function(e,t){return V(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return ee(o);case"XXXX":case"XX":return te(o);default:return te(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return ee(o);case"xxxx":case"xx":return te(o);default:return te(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+K(o,":");default:return"GMT"+te(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+K(o,":");default:return"GMT"+te(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return F(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return F((r._originalDate||e).getTime(),t.length)}};function K(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=t||"";return n+String(o)+i+F(a,2)}function ee(e,t){return e%60==0?(e>0?"-":"+")+F(Math.abs(e)/60,2):te(e,t)}function te(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+F(Math.floor(o/60),2)+n+F(o%60,2)}const ne=$;var re=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},oe=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const ae={p:oe,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return re(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",re(o,t)).replace("{{time}}",oe(a,t))}};function ie(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var ce=["D","DD"],le=["YY","YYYY"];function de(e){return-1!==ce.indexOf(e)}function se(e){return-1!==le.indexOf(e)}function ue(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var fe={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function me(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}const he={date:me({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:me({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:me({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Ae={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function pe(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var i=e.defaultWidth,c=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[c]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const ge={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:pe({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:pe({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:pe({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:pe({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:pe({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ve(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=t.match(o);if(!a)return null;var i,c=a[0],l=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(l)?Ce(l,(function(e){return e.test(c)})):be(l,(function(e){return e.test(c)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var s=t.slice(c.length);return{value:i,rest:s}}}function be(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function Ce(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var ye,we={ordinalNumber:(ye={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(ye.matchPattern);if(!n)return null;var r=n[0],o=e.match(ye.parsePattern);if(!o)return null;var a=ye.valueCallback?ye.valueCallback(o[0]):o[0];a=t.valueCallback?t.valueCallback(a):a;var i=e.slice(r.length);return{value:a,rest:i}}),era:ve({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ve({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ve({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ve({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ve({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Ee={code:"en-US",formatDistance:function(e,t,n){var r,o=fe[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:he,formatRelative:function(e,t,n,r){return Ae[e]},localize:ge,match:we,options:{weekStartsOn:0,firstWeekContainsDate:1}};var xe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Be=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ke=/^'([^]*?)'?$/,Te=/''/g,Se=/[a-zA-Z]/;function Me(e){var t=e.match(ke);return t?t[1].replace(Te,"'"):e}function Le(e){const t=function(e,t,n){var r,o,a,i,c,l,d,s,u,f,m,h,A,p,g,v,b,C;E(2,arguments);var y=String(t),w=N(),x=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:w.locale)&&void 0!==r?r:Ee,B=M(null!==(a=null!==(i=null!==(c=null!==(l=null==n?void 0:n.firstWeekContainsDate)&&void 0!==l?l:null==n||null===(d=n.locale)||void 0===d||null===(s=d.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==c?c:w.firstWeekContainsDate)&&void 0!==i?i:null===(u=w.locale)||void 0===u||null===(f=u.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==a?a:1);if(!(B>=1&&B<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var k=M(null!==(m=null!==(h=null!==(A=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(g=n.locale)||void 0===g||null===(v=g.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==A?A:w.weekStartsOn)&&void 0!==h?h:null===(b=w.locale)||void 0===b||null===(C=b.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==m?m:0);if(!(k>=0&&k<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!x.localize)throw new RangeError("locale must contain localize property");if(!x.formatLong)throw new RangeError("locale must contain formatLong property");var L=T(e);if(!S(L))throw new RangeError("Invalid time value");var j=ie(L),U=D(L,j),P={firstWeekContainsDate:B,weekStartsOn:k,locale:x,_originalDate:L};return y.match(Be).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,ae[t])(e,x.formatLong):e})).join("").match(xe).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Me(r);var a=ne[o];if(a)return null!=n&&n.useAdditionalWeekYearTokens||!se(r)||ue(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!de(r)||ue(r,t,String(e)),a(U,r,x.localize,P);if(o.match(Se))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}(new Date(e.replace(/-/g,"/")),"MM/dd/yyyy");return t}function De(e){const t=e.target.parentNode.parentNode.children[2].children[1].innerText;let n;for(let e in Re)Re[e].title==t&&(n=Re[e]);const r=e.target.parentNode.parentNode.children[0].innerText;let o;for(let e in n.todoList)n.todoList[e].title==r&&(o=n.todoList[e]);const a=e.target.parentNode.parentNode;a.children[0].remove(),a.children[0].children[1].remove(),a.children[2].children[1].remove();const i=document.createElement("input");i.type="text",i.name="title",i.autocomplete="off",i.placeholder=o.title,a.insertBefore(i,a.children[0]);const c=document.createElement("input");c.type="text",c.name="dueDate",c.placeholder=o.dueDate,c.addEventListener("focus",(()=>c.type="date")),c.addEventListener("blur",(()=>{""==c.value&&(c.type="text")})),a.children[1].appendChild(c);const l=document.createElement("select");l.name="priority",a.children[3].insertBefore(l,a.querySelector(".checkbox"));const d=document.createElement("option");d.value="Low",d.innerText="Low",l.appendChild(d);const s=document.createElement("option");s.value="Medium",s.innerText="Medium",l.appendChild(s);const u=document.createElement("option");u.value="High",u.innerText="High",l.appendChild(u);const f=[d,s,u];for(let e of f)e.value==o.priority&&(e.selected="true");const m=document.createElement("div");m.classList.add("buttonsContainer"),a.appendChild(m);const h=document.createElement("button");h.innerText="Save",h.addEventListener("click",(()=>{""==i.value&&(i.value=o.title),""==c.value&&(c.value=o.dueDate),o.title=i.value,o.dueDate=Le(c.value),o.priority=l.value,We()})),m.appendChild(h);const A=document.createElement("button");A.innerText="Cancel",A.addEventListener("click",We),m.appendChild(A)}const je=document.querySelector(".content");function Ue(e){let t=document.createElement("div");t.classList.add("todo"),t.classList.add(e.priority.toLowerCase()),je.appendChild(t);let n=document.createElement("p");n.classList.add("title"),n.innerText=e.title,t.appendChild(n);let r=document.createElement("div");r.classList.add("dueContainer"),t.appendChild(r);let o=document.createElement("p");o.innerText="Due: ",r.appendChild(o);let a=document.createElement("p");a.innerText=e.dueDate,r.appendChild(a);let i=document.createElement("div");i.classList.add("projectContainer"),t.appendChild(i);let c=document.createElement("p");c.innerText="Project: ",i.appendChild(c);let l=document.createElement("p");l.classList.add("projectTitle"),l.innerText=e.project,i.appendChild(l);let d=document.createElement("div");d.classList.add("priorityContainer"),t.appendChild(d);let s=document.createElement("p");s.innerText="Priority: ",d.appendChild(s);let u=document.createElement("p");u.innerText=e.priority,d.appendChild(u);let f=document.createElement("img");f.setAttribute("src",v),f.setAttribute("alt","checkbox unchecked"),f.classList.add("checkbox"),d.appendChild(f),f.addEventListener("click",w);let m=document.createElement("img");m.setAttribute("src",b),m.setAttribute("alt","edit"),m.classList.add("edit"),m.addEventListener("click",De),d.appendChild(m);let h=document.createElement("img");h.setAttribute("src",C),h.setAttribute("alt","delete"),h.classList.add("delete"),h.addEventListener("click",(()=>function(e){for(let t in Re)Re[t].title==e.project&&Re[t].todoList.splice(Re[t].todoList.indexOf(e),1);We()}(e))),d.appendChild(h)}function Pe(){const e=Array.from(document.querySelector(".projectsContainer").childNodes);for(let t in e){let n=Array.from(e[t].children);for(let e in n)n[e].classList.contains("delete")&&n[e].remove()}}function qe(e){for(let t in Re)Re[t].title==e.target.previousSibling.innerText&&Re.splice(t,1);We(document.querySelector(".home")),Ne()}function Ye(){const e=document.querySelector(".modal");e.style.display="block",document.querySelector(".close").onclick=()=>e.style.display="none",window.onclick=t=>{t.target==e&&(e.style.display="none")}}function We(e){!function(){const e=document.querySelector(".content");for(;e.firstChild;)e.removeChild(e.firstChild)}();const t=document.querySelector(".navbar"),n=document.querySelector(".projectsContainer"),r=Array.from(t.children),o=Array.from(n.children);if(null==e||"Cancel"==e.target.innerText){for(let t in r)r[t].classList.contains("selected")&&(e=r[t]);for(let t in o)o[t].firstChild.classList.contains("selected")&&(e=o[t].firstChild)}else null!=e.target&&(console.log(e.target),e=e.target);for(let e in r)r[e].classList.contains("selected")&&r[e].classList.remove("selected");for(let e in o)o[e].firstChild.classList.contains("selected")&&o[e].firstChild.classList.remove("selected");"Home"==e.innerText?function(){for(let e of Re)for(let t of e.todoList)Ue(t);Pe(),document.querySelector(".home").classList.add("selected")}():"Week"==e.innerText?(document.querySelector(".week").classList.add("selected"),Pe()):"Month"==e.innerText?(document.querySelector(".month").classList.add("selected"),Pe()):function(e){let t;for(let n in Re)Re[n].title==e.innerText&&(t=n);for(let e of Re[t].todoList)Ue(e);const n=document.createElement("img");n.setAttribute("src",g),n.setAttribute("alt","Add Todo"),n.classList.add("add"),n.classList.add("newTodo"),n.addEventListener("click",Ye),document.querySelector(".content").appendChild(n),Pe();let r=document.createElement("img");r.setAttribute("src",C),r.setAttribute("alt","delete"),r.classList.add("delete"),r.addEventListener("click",qe),e.parentNode.appendChild(r),e.classList.add("selected")}(e)}function Ne(){!function(){const e=document.querySelector(".projectsContainer");for(;e.firstChild;)e.removeChild(e.firstChild)}();const e=document.querySelector(".projectsContainer");for(let t of Re){let n=document.createElement("div");n.classList.add("project"),e.appendChild(n);let r=document.createElement("p");r.innerText=t.title,r.addEventListener("click",We),n.appendChild(r)}}const Oe=(e,t)=>({title:e,todoList:t});function ze(){const e=document.querySelector(".projectsContainer");let t=[];const n=Array.from(e.children);for(let e in n)t.push(n[e].innerText);const r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("name","title"),e.appendChild(r),r.focus(),r.addEventListener("keydown",(e=>{if("Enter"==e.code){let e=r.value;if(""!=e&&!t.includes(e)){const t=Oe(e,[]);Re.push(t),Ne()}}}))}const He=(e,t,n,r)=>({title:e,dueDate:t,priority:n,project:r});let Re=[];!function(){let e=Oe("Example",[He("Take out the garbage","11/01/22","Low","Example"),He("Grocery shopping","11/02/22","Medium","Example"),He("Take a shower","11/01/22","High","Example")]);Re.push(e);let t=Oe("Example 2",[He("Fix the sink","11/01/22","Low","Example 2"),He("Take kids to school","11/02/22","Medium","Example 2"),He("Brush teeth","11/01/22","High","Example 2")]);Re.push(t)}(),Ne(),function(){const e=document.createElement("img");e.setAttribute("src",p),e.setAttribute("alt","checklist icon"),e.classList.add("logo"),document.querySelector(".header").insertBefore(e,document.querySelector("h1"));let t=document.createElement("img");t.setAttribute("src",g),t.setAttribute("alt","Add Project"),t.classList.add("add"),t.addEventListener("click",ze),document.querySelector(".navbar").appendChild(t)}(),We(),document.querySelector(".home").addEventListener("click",We),document.querySelector(".week").addEventListener("click",We),document.querySelector(".month").addEventListener("click",We),document.querySelector(".addTodo").addEventListener("click",(function(){let e=document.querySelector("[name=title]"),t=document.querySelector("[name=dueDate]"),n=Array.from(document.querySelectorAll("[name=priority]"));for(let e in n)1==n[e].checked&&(n=n[e].value);if(""==e.value||""==t.value)return;let r,o,a=Array.from(document.querySelector(".projectsContainer").childNodes);for(let e in a)a[e].firstChild.classList.contains("selected")&&(r=a[e].firstChild.innerText);for(let e in Re)Re[e].title==r&&(o=Re[e]);let i=Le(t.value),c=He(e.value,i,n,o.title);o.todoList.push(c),We(),document.querySelector(".modal").style.display="none",e.value="",t.value="",document.querySelector("[value=Low]").checked=!0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,